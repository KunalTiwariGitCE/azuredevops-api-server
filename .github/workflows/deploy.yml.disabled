name: Deploy Azure DevOps API Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping..."
        fi
      continue-on-error: true
      
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r dist/ deploy/
        cp package*.json deploy/
        cp README.md deploy/
        cp DEPLOYMENT_GUIDE.md deploy/ || echo "DEPLOYMENT_GUIDE.md not found"
        cp COPILOT_STUDIO_INTEGRATION.md deploy/ || echo "COPILOT_STUDIO_INTEGRATION.md not found"
        
    - name: Create Railway deployment config
      run: |
        cat > deploy/railway.json << EOF
        {
          "build": {
            "builder": "NIXPACKS"
          },
          "deploy": {
            "startCommand": "node dist/comprehensive-api-server.js PwCD365CE --port 8080",
            "healthcheckPath": "/health",
            "healthcheckTimeout": 300
          }
        }
        EOF
        
    - name: Create Render deployment config
      run: |
        cat > deploy/render.yaml << EOF
        services:
        - type: web
          name: azuredevops-api-server
          env: node
          buildCommand: npm install && npm run build
          startCommand: node dist/comprehensive-api-server.js PwCD365CE --port 8080
          healthCheckPath: /health
          envVars:
          - key: NODE_ENV
            value: production
          - key: PORT
            value: 8080
        EOF
        
    - name: Create Dockerfile for containerized deployment
      run: |
        cat > deploy/Dockerfile << EOF
        FROM node:20-alpine
        
        WORKDIR /app
        
        # Copy package files
        COPY package*.json ./
        
        # Install dependencies
        RUN npm ci --only=production
        
        # Copy built application
        COPY dist/ ./dist/
        
        # Create non-root user
        RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
        RUN chown -R nodejs:nodejs /app
        USER nodejs
        
        # Expose port
        EXPOSE 8080
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\
          CMD curl -f http://localhost:8080/health || exit 1
        
        # Start server
        CMD ["node", "dist/comprehensive-api-server.js", "PwCD365CE", "--port", "8080"]
        EOF
        
    - name: Create Heroku deployment config
      run: |
        cat > deploy/app.json << EOF
        {
          "name": "Azure DevOps API Server",
          "description": "Comprehensive REST API server for Azure DevOps integration with Microsoft Copilot Studio",
          "repository": "https://github.com/\$GITHUB_REPOSITORY",
          "logo": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/azuredevops/azuredevops-original.svg",
          "keywords": ["azure-devops", "api", "copilot-studio", "nodejs"],
          "image": "heroku/nodejs",
          "stack": "heroku-22",
          "buildpacks": [
            {
              "url": "heroku/nodejs"
            }
          ],
          "env": {
            "ADO_ORGANIZATION": {
              "description": "Your Azure DevOps organization name",
              "value": "PwCD365CE"
            },
            "NODE_ENV": {
              "description": "Node environment",
              "value": "production"
            }
          },
          "formation": {
            "web": {
              "quantity": 1,
              "size": "free"
            }
          },
          "scripts": {
            "postdeploy": "echo 'Deployment completed successfully!'"
          }
        }
        EOF
        
    - name: Create Vercel deployment config
      run: |
        cat > deploy/vercel.json << EOF
        {
          "version": 2,
          "name": "azuredevops-api-server",
          "builds": [
            {
              "src": "dist/comprehensive-api-server.js",
              "use": "@vercel/node"
            }
          ],
          "routes": [
            {
              "src": "/(.*)",
              "dest": "/dist/comprehensive-api-server.js"
            }
          ],
          "env": {
            "NODE_ENV": "production",
            "ADO_ORGANIZATION": "PwCD365CE"
          }
        }
        EOF
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./deploy
        cname: your-custom-domain.com  # Optional: replace with your domain
        
    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Deployment Options Created:" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Railway: Use \`railway.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Render: Use \`render.yaml\`" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Heroku: Use \`app.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Vercel: Use \`vercel.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Docker: Use \`Dockerfile\`" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… GitHub Pages: Static files deployed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”— Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Choose your preferred deployment platform" >> $GITHUB_STEP_SUMMARY
        echo "2. Deploy using the provided config files" >> $GITHUB_STEP_SUMMARY
        echo "3. Configure Microsoft Copilot Studio connector" >> $GITHUB_STEP_SUMMARY
        echo "4. Test your Azure DevOps API integration" >> $GITHUB_STEP_SUMMARY